// DISPLAY
$displays: (
  'hide':     none,
  'flex':     flex,
  'block':    block,
  'inline':   inline,
  'inflex':   inline-flex,
  'inblock':  inline-block
) !default;

@each $key, $value in $displays {
  @include helpers($key, 'display', $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {
    @each $key, $value in $displays {
      @include helpers('#{$key}-#{$type}', 'display', $value);
    }
  }
}

// FLEX
[class*="flex"],
[class*="col"],
[class*="row"] {
  --flex-place-content: center;
}

[class*="col"] {
  --column-padding: 0 10px;
}

[class*="row"] {
  --row-padding: 10px 0;
}

.flex,
.col,
.row,
.col-rev,
.row-rev {
  display: flex;
  place-content: var(--flex-place-content);
}

.col,
.col-rev {
  padding: var(--column-padding);
}

.row,
.row-rev {
  padding: var(--row-padding);
}

.flex {
  flex-wrap: wrap;
}

.col {
  flex-direction: column;
}

.row {
  flex-direction: row;
}

.col-rev {
  flex-direction: column-reverse;
}

.row-rev {
  flex-direction: row-reverse;
}

// GRID
[class*="grid"] {
  --grid-max-width: 90%;
  --grid-margin: auto;

  display: grid;
  max-width: var(--grid-max-width);
  margin: var(--grid-margin);
}

@mixin grid-template($column, $key) {
  [class*="grid-"][class*="-#{$column}#{$key}"] {
    grid-template: auto/repeat(#{$column}, auto);
  }
}

@for $i from 2 to 13 {
  @include grid-template($i, 'tn');
}

@each $key, $value in $breakpoints {
  @media (min-width: $value) {
    @for $i from 2 to 13 {
      @include grid-template($i, $key);
    }
  }
}

// GAP
$gap-tn:  1px   !default;
$gap-sm:  2px   !default;
$gap-md:  5px   !default;
$gap-lg:  10px  !default;
$gap-wd:  20px  !default;

$gaps: (
  'tn': $gap-tn,
  'sm': $gap-sm,
  'md': $gap-md,
  'lg': $gap-lg,
  'wd': $gap-wd
) !default;

[class*="gap-"] {
  @each $key, $value in $gaps {
    --gap-#{$key}: #{$value};
  }
}

@mixin gap($key) {
  [class*="gap-"][class*="-#{$key}"] {
    gap: var(--gap-#{$key});
  }
}

@include gap('tn');

@each $key, $value in $breakpoints {
  @media (min-width: $value) {
    @include gap($key);
  }
}

// PLACE CONTENT
$place-content: (
  'around':   space-around,
  'between':  space-between,
  'evenly':   space-evenly,
  'center':   center,
  'stretch':  stretch
) !default;

$place-content-start: flex-start  !default;
$place-content-end:   flex-end    !default;

$place-content-var: (
  'start':  $place-content-start,
  'end':    $place-content-end
) !default;

[class*="placo-"] {
  @each $key, $value in $place-content-var {
    --place-content-#{$key}: #{$value};
  }
}

@mixin place-content($key, $type: '', $value: var(--place-content-#{$key})) {
  .placo-#{$key}#{$type} {
    place-content: #{$value};
  }
}

@each $key, $value in $place-content-var {
  @include place-content($key);
}

@each $key, $value in $place-content {
  @include place-content($key, '', $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {

    @each $key, $value in $place-content-var {
      @include place-content($key, '-#{$type}');
    }

    @each $key, $value in $place-content {
      @include place-content($key, '-#{$type}', $value);
    }
  }
}

// PLACE ITEMS
$place-items: (
  'normal':   normal,
  'center':   center,
  'stretch':  stretch
) !default;

$place-items-baseline:  baseline    !default;
$place-items-start:     flex-start  !default;
$place-items-end:       flex-end    !default;

$place-items-var: (
  'base':   $place-items-baseline,
  'start':  $place-items-start,
  'end':    $place-items-end
) !default;

[class*="plait-"] {
  @each $key, $value in $place-items-var {
    --place-items-#{$key}: #{$value};
  }
}

@mixin place-items($key, $type: '', $value: var(--place-items-#{$key})) {
  .plait-#{$key}#{$type} {
    place-items: #{$value};
  }
}

@each $key, $value in $place-items-var {
  @include place-items($key);
}

@each $key, $value in $place-items {
  @include place-items($key, '', $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {

    @each $key, $value in $place-items-var {
      @include place-items($key, '-#{$type}');
    }

    @each $key, $value in $place-items {
      @include place-items($key, '-#{$type}', $value);
    }
  }
}

// PLACE SELF
$place-self: (
  'auto':     auto,
  'normal':   normal,
  'center':   center,
  'stretch':  stretch
) !default;

$place-self-baseline: baseline    !default;
$place-self-start:    flex-start  !default;
$place-self-end:      flex-end    !default;

$place-self-var: (
  'base':   $place-self-baseline,
  'start':  $place-self-start,
  'end':    $place-self-end
) !default;

[class*="plase-"] {
  @each $key, $value in $place-self-var {
    --place-self-#{$key}: #{$value};
  }
}

@mixin place-self($key, $type: '', $value: var(--place-self-#{$key})) {
  .plase-#{$key}#{$type} {
    place-self: #{$value};
  }
}

@each $key, $value in $place-self-var {
  @include place-self($key);
}

@each $key, $value in $place-self {
  @include place-self($key, '', $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {

    @each $key, $value in $place-self-var {
      @include place-self($key, '-#{$type}');
    }

    @each $key, $value in $place-self {
      @include place-self($key, '-#{$type}', $value);
    }
  }
}

// POSITION
$positions: (
  'absolute': absolute,
  'fixed':    fixed,
  'relative': relative,
  'sticky':   sticky
) !default;

@each $key, $value in $positions {
  @include helpers($key, 'position', $value);
}

@each $type, $breakpoint in $breakpoints {
  @media (min-width: $breakpoint) {
    @each $key, $value in $positions {
      @include helpers('#{$key}-#{$type}', 'position', $value);
    }
  }
}
